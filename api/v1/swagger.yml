openapi: "3.0.0"
info:
  title: "AutoBk GUI API"
  version: "1.0.0"
  description: "API for AutoBk GUI"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
tags:
  - name: 'devices'
    description: 'Device management'
  - name: 'schedules'
    description: 'Schedule management'
  - name: 'backups'
    description: 'Backup management'
  - name: 'users'
    description: 'User management'
paths:
  /schedules:
    get:
      security:
        - bearerAuth: []
      tags:
        - "schedules"
      summary: "Retrieve all schedules"
      description: "Fetches a list of all backup schedules."
      responses:
        200:
          description: "A list of all schedules"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    scheduleId:
                      type: integer
                      description: "The unique identifier of the schedule."
                    deviceId:
                      type: integer
                      description: "The unique identifier of the device associated with the schedule."
                    state:
                      type: string
                      description: "The state of the schedule."
                    scheduledTime:
                      type: string
                      format: date-time
                      description: "The time at which the backup is scheduled."
                    comment:
                      type: string
                      description: "Any comments related to the backup schedule."
        500:
          description: "Error message in case of server error."

  /schedules/{deviceId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "schedules"
      summary: "Retrieve all scheduled backups for a specific device"
      description: "Fetches a list of all scheduled backups for a specified device, excluding those that have failed or are complete."
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: integer
          description: "Unique identifier of the device to retrieve scheduled backups for."
      responses:
        200:
          description: "A list of scheduled backups for the specified device"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    scheduleId:
                      type: integer
                      description: "The unique identifier of the schedule."
                    state:
                      type: string
                      description: "The state of the schedule."
                    scheduledTime:
                      type: string
                      format: date-time
                      description: "The time at which the backup is scheduled."
                    attemptCount:
                      type: integer
                      description: "The number of attempts made for the backup."
                    comment:
                      type: string
                      description: "Any comments related to the backup schedule."
        500:
          description: "Error message in case of server error."
    post:
      security:
        - bearerAuth: []
      tags:
        - "schedules"
      summary: "Schedule a backup for a device"
      description: "Creates a new backup schedule for a specified device."
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: integer
          description: "The unique identifier of the device for which the backup is to be scheduled."
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                scheduledTime:
                  type: string
                  format: date-time
                  description: "Optional. The time to schedule the backup in ISO 8601 format. If not provided, the current time will be used."
      responses:
        200:
          description: "Details of the scheduled backup"
          content:
            application/json:
              schema:
                type: object
                properties:
                  scheduleId:
                    type: integer
                    description: "The unique identifier of the scheduled backup."
                  deviceId:
                    type: integer
                    description: "The unique identifier of the device for which the backup is scheduled."
                  state:
                    type: string
                    description: "The state of the scheduled backup."
                  scheduledTime:
                    type: string
                    format: date-time
                    description: "The time at which the backup is scheduled."
                  comment:
                    type: string
                    description: "Any comments related to the backup schedule."
        500:
          description: "Error message in case of server error."
  /devices:
    get:
      security:
        - bearerAuth: []
      tags:
        - "devices"
      summary: "Retrieve a list of all devices"
      description: "Fetches a list of all devices with their details including latest backup and next scheduled backup."
      responses:
        200:
          description: "A list of devices"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    deviceId:
                      type: integer
                      description: "The unique identifier of the device."
                    name:
                      type: string
                      description: "The name of the device."
                    type:
                      type: string
                      description: "The type of the device."
                    ip:
                      type: string
                      description: "The IP address of the device."
                    latestBackup:
                      type: object
                      description: "Details of the latest backup for the device."
                      properties:
                        fileId:
                          type: integer
                          description: "The identifier for the latest backup file."
                          # ... other properties for latestBackup ...
                    nextSchedule:
                      type: object
                      description: "Details of the next scheduled backup for the device."
                      properties:
                        scheduleId:
                          type: integer
                          description: "The identifier for the next scheduled backup."
                          # ... other properties for nextSchedule ...
        500:
          description: "Error message in case of server error."
    post:
      security:
        - bearerAuth: []
      tags:
        - "devices"
      summary: "Add a new device"
      description: "Creates a new device with the given details."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Name of the new device."
                type:
                  type: string
                  enum: [ APEX, DCM, CAP, Inca1, Vista, OneNet, OneNetLog, TC600E, CXCHP, PSSend, Quartet ]
                  description: "Type of the new device."
                ip:
                  type: string
                  description: "IPv4 address of the new device."
                autoDay:
                  type: integer
                  description: "Auto backup day for the new device."
                autoHour:
                  type: integer
                  description: "Auto backup hour for the new device."
                autoWeeks:
                  type: integer
                  description: "Auto backup frequency in weeks for the new device."
                # ... other fields for the new device ...
      responses:
        201:
          description: "The newly created device information"
          content:
            application/json:
              schema:
                type: object
                properties:
                  deviceId:
                    type: integer
                    description: "The unique identifier of the newly added device."
                  name:
                    type: string
                    description: "The name of the newly added device."
                  type:
                    type: string
                    description: "The type of the newly added device."
                  ip:
                    type: string
                    description: "The IP address of the newly added device."
                  autoDay:
                    type: integer
                    description: "Auto backup day of the newly added device."
                  autoHour:
                    type: integer
                    description: "Auto backup hour of the newly added device."
                  autoWeeks:
                    type: integer
                    description: "Auto backup frequency in weeks of the newly added device."
        500:
          description: "Error message in case of server error."

  /devices/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "devices"
      summary: "Retrieve information about a specific device"
      description: "Fetches detailed information about a device including its backups and scheduled backups based on its unique identifier."
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Unique identifier of the device"
      responses:
        200:
          description: "Detailed information of the specified device"
          content:
            application/json:
              schema:
                type: object
                properties:
                  deviceInfo:
                    type: object
                    properties:
                      deviceId:
                        type: integer
                        description: "The unique identifier of the device."
                      name:
                        type: string
                        description: "The name of the device."
                      type:
                        type: string
                        description: "The type of the device."
                      ip:
                        type: string
                        description: "The IP address of the device."
                      autoDay:
                        type: integer
                        description: "Auto backup day."
                      autoHour:
                        type: integer
                        description: "Auto backup hour."
                      autoWeeks:
                        type: integer
                        description: "Auto backup frequency in weeks."
                      # ... other properties of deviceInfo ...
                  backups:
                    type: array
                    description: "List of backups for the device."
                    items:
                      # ... schema for each backup ...
                  scheduledBackups:
                    type: array
                    description: "List of scheduled backups for the device."
                    items:
                      # ... schema for each scheduled backup ...
        500:
          description: "Error message in case of server error."
    put:
      security:
        - bearerAuth: []
      tags:
        - "devices"    
      summary: "Update a specific device"
      description: "Updates the information of a device identified by its ID. Can modify details like name, IP address, backup schedule, etc."
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Unique identifier of the device to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Updated name of the device."
                ip:
                  type: string
                  description: "Updated IP address of the device."
                autoDay:
                  type: integer
                  description: "Updated auto backup day."
                autoHour:
                  type: integer
                  description: "Updated auto backup hour."
                autoWeeks:
                  type: integer
                  description: "Updated auto backup frequency in weeks."
      responses:
        200:
          description: "The updated device information"
          content:
            application/json:
              schema:
                type: object
                properties:
                  deviceId:
                    type: integer
                    description: "The unique identifier of the updated device."
                  name:
                    type: string
                    description: "The updated name of the device."
                  type:
                    type: string
                    description: "The updated type of the device."
                  ip:
                    type: string
                    description: "The updated IP address of the device."
                  autoDay:
                    type: integer
                    description: "Updated auto backup day."
                  autoHour:
                    type: integer
                    description: "Updated auto backup hour."
                  autoWeeks:
                    type: integer
                    description: "Updated auto backup frequency in weeks."
        500:
          description: "Error message in case of server error."
    delete:
      tags:
        - "devices"
      summary: "Delete a specific device"
      description: "Deletes a device and all associated backups and schedules based on its unique identifier."
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Unique identifier of the device to delete"
      responses:
        200:
          description: "Device and all associated data deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
        500:
          description: "Error message in case of server error."
      security:
        - bearerAuth: []         
  /login:
    post:
      security: []
      tags:
        - "users"
      summary: "Login"
      description: "Logs in a user and returns a JWT token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "Email address of the user."
                password:
                  type: string
                  description: "Password of the user."
      responses:
        200:
          description:  "JWT token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "JWT token"
                  userLevel:
                    type: string
                    description: "User level"
        401:
          description: "Invalid credentials"
        500:
          description: "Error message in case of server error."
  /register:
    post:
      tags:
        - users
      summary: Register a new user
      description: Creates a new user account. Requires administrator privileges.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
                isDailyReportEnabled:
                  type: boolean
                  description: Flag to enable or disable daily reports for the user
                userLevel:
                  type: string
                  enum: [Administrator, User, Basic]
                  description: The user level for the new account
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                  userId:
                    type: integer
                    description: The unique identifier of the newly created user
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
  /user/update-settings/{userId}:
    put:
      tags:
        - "users"
      summary: "Updates user settings"
      description: "Updates the settings for a specific user."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "The unique identifier of the user whose settings are to be updated."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # Include properties that can be updated
      responses:
        200:
          description: "User settings updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
        401:
          description: "Unauthorized"
        500:
          description: "Server error"
  /user/change-password:
    put:
      tags:
        - "users"
      summary: "Changes the password for a user"
      description: "Allows a user to change their password."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: "The current password of the user."
                newPassword:
                  type: string
                  format: password
                  description: "The new password for the user."
      responses:
        200:
          description: "Password changed successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
        401:
          description: "Unauthorized"
        500:
          description: "Server error"
  /user/{userId}:
    delete:
      tags:
        - "users"
      summary: "Deletes a user by their ID"
      description: "Removes a user from the system using their unique identifier."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "The unique identifier of the user to be deleted."
      responses:
        200:
          description: "User deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
        401:
          description: "Unauthorized"
        404:
          description: "User not found"
        500:
          description: "Server error"
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve information about a specific user"
      description: "Retrieves information about a specific user by their ID."
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "Unique identifier of the user."
      responses:
        200:
          description: "Detailed information of the specified user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    description: "The unique identifier of the user."
                  email:
                    type: string
                    description: "Email of the user."
                  userLevel:
                    type: string
                    description: "User level of the account."
                  # Add other properties of the user as needed
        500:
          description: "Error message in case of server error."
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve a list of all users"
      description: "Retrieves a list of all users."
      responses:
        200:
          description: "A list of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: integer
                      description: "The unique identifier of the user."
                    email:
                      type: string
                      description: "Email of the user."
                    userLevel:
                      type: string
                      description: "User level of the account."
                    # Add other properties of the user as needed
        500:
          description: "Error message in case of server error."
  /user/reset-password-request:
    post:
      tags:
        - "users"
      summary: "Initiate a password reset request"
      description: "Initiates a password reset request."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "Email address of the user requesting a password reset."
      responses:
        200:
          description: "Password reset request initiated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Confirmation message indicating that the password reset request was initiated."
        400:
          description: "Invalid request parameters"
        500:
          description: "Error message in case of server error."
  /user/reset-password:
    post:
      tags:
        - "users"
      summary: "Reset the password for a user"
      description: "Resets the password for a user."
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: "Password reset token."
        - in: query
          name: newPassword
          required: true
          schema:
            type: string
          description: "New password for the user."
      responses:
        200:
          description: "Password reset successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Confirmation message indicating that the password has been reset."
        400:
          description: "Invalid request parameters or token"
        500:
          description: "Error message in case of server error."
  /user/unlock/{userId}:
    put:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Unlock a user account"
      description: "Unlocks a user account."
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: "Unique identifier of the user to unlock."
      responses:
        200:
          description: "User account unlocked successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Confirmation message indicating that the user account has been unlocked."
        404:
          description: "User not found"
        500:
          description: "Error message in case of server error."

